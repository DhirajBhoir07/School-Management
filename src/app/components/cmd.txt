
========= Git Cammands =========

git init 

git branch 
git branch -c <new branch name>  // USED TO CREATE A NEW BRANCH
git branch -m <old branch name> <new branch name>  // USED TO RENAME THE BRANCH
git branch -d <branch name>  // USED TO DELETE THE BRANCH

git checkout <branch name>
git status 
git add <file-name> <file-name 2>       // add manually files one by one 
git add .            // add all files.

git merge <branch name>

git diff  <cammand> // its informative cammand like "log" 
git diff --staged
git diff <branch name 1 >  <branch name 1 >
git diff <commit id 1 >  <commit id 2 >


git stash           // ITS LIKE TEMPORARY MEMORY , USED WHEN WE WANT TO GO THE ANOTHER BRANCH
git stash save "<save with massage>"
git stash list           // CHECKOUT STASH LIST 

git stash apply // RECENT STASH
git stash apply stash@{0}  // APPLY SPECIFIC STASH
git stash pop       // You can apply and drop the stash by using the following command:
git stash drop      // DROP THE STASH
git stash apply stash@{0} <branch-name>   // YOU CAN APPLY THE STASH TO A SPECIFIC BRANCH BY USING THE FOLLOWING COMMAND:
git stash clear 


// NORMALLY NOT USED BY THE DEVELOPER == USED BY THE PRODUCT MANAGER , mostly at the time of version release in open source
git tag <tag name>
git tag
git tag <tag name> <commit hash>  // attatch tag name with commit hash code
git tag -d <tag name>       // delete tag
git push origin <tag name>  // push this tag name


// Rebase or Reflog
REBASE :- Git rebase is a powerful Git feature used to change the base of a branch.
          It effectively allows you to move a branch to a new starting point, 
        @ DON'T DO IT ON THE MAIN BRANCH ... DO IT ON THE BRANCH THAT YOU WANT TO REBASE.

like we have new branch called feature-b 
we add somthing in feature-b so now you -b branch is ahead of main branch then
we add something in the main branch then main branch is ahead now since the main branch ahead of 
one commit we want it to rebase to have the -b 
so we checkout feature-b then we use the cmd - git rebase master ...... Head -> feature-b


---------0----              ---------0----------0      ---------0----------0 
         \------0                      \------0                            \------0


----------0----------0--------0

Git reflog :

Git reflog is a command that shows you the history of your commits.
It allows you to see the changes that you have made to your repository over time. 
This can be useful for debugging and understanding the history of your project.

git reflog  // gives you the history



        